{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/FloatingButton.js","components/CreateAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/FeedPage.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/CoursesPage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","getDisplayName","userId","JSON","parse","localStorage","getItem","displayName","getProfilePic","data","profilePicURL","profilePicDataURL","logOut","ModeBar","FloatingButton","handleClick","CreateAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","newUserRef","value","handleNewAccountChange","event","target","name","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","rounds","roundCount","fetch","headers","method","body","stringify","res","status","accountCreateStatus","text","resText","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","LoginPage","handleLogin","loginBtnIcon","loginBtnLabel","setUserId","emailInputRef","handleLoginSubmit","passwordInputRef","window","open","loginMsg","setTimeout","hideErrorMsg","handleLoginChange","thisUser","msg","accountCreateAttempted","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","showResetPasswordDialog","githubIcon","githubLabel","focus","htmlFor","style","padding","fontSize","FeedPage","fontStyle","RoundsTable","editRound","setEditId","confirmDelete","setDeleteId","alert","renderTable","table","r","push","key","date","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","startData","max","disabled","Rounds","addRound","newData","setItem","editId","deleteRound","deleteId","val","icon","CoursesPage","modeTitle","modeToPage","App","handleChangeMode","newMode","openMenu","closeMenu","prevState","Id","authenticated","then","response","json","obj","isAuthenticated","user","profileImageUrl","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6212c7ec.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\ngetDisplayName = () => {\r\n  if (this.props.userId == \"\") {\r\n    return \"\";\r\n  } else {\r\n    const data = JSON.parse(localStorage.getItem(this.props.userId));\r\n    return data.displayName;\r\n  }\r\n}\r\n\r\ngetProfilePic = () => {\r\n  if (this.props.userId == \"\") {\r\n    return \"\";\r\n  } else {\r\n    const data = JSON.parse(localStorage.getItem(this.props.userId));\r\n    if (data.profilePicURL != \"\") {\r\n      return data.profilePicURL;\r\n    } else {\r\n      return data.profilePicDataURL;\r\n    }\r\n  }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.getProfilePic()} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.getDisplayName()}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\">\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","import React from 'react';\r\n\r\nclass CreateAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicDataURL: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match original password.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n        let data = JSON.parse(localStorage.getItem(this.newUserRef.current.value));\r\n        if (data != null) {\r\n            //The user name is already taken\r\n            this.newUserRef.current.setCustomValidity(\"An account already exists under this email address. \" +\r\n              \"Use 'Reset password' to recover the password.\");\r\n        } else {\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\r\n    handleNewAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicDataURL: \"\",\r\n                profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: \"\",\r\n                                   profilePicDataURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleCreateAccount = async (event) =>{\r\n        event.preventDefault();\r\n        const url = '/users' + this.state.accountName;\r\n        const accountInfo = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.accountPassword,\r\n            profilePicURL: (this.state.profilePicURL != \"\" ? this.state.profilePicDataURL : \r\n                            this.state.profilePicDataURL),\r\n            securityQuestion: this.state.accountSecurityQuestion,\r\n            securityAnswer: this.state.accountSecurityAnswer,\r\n            rounds: {},\r\n            roundCount: 0\r\n        };\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              },\r\n            method: 'POST',\r\n            body: JSON.stringify(accountInfo)}); \r\n        if (res.status == 200) { //successful account creation!\r\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.accountCreateStatus(resText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n            <center>\r\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\r\n            </center>\r\n            <button className=\"close\" \r\n                onClick={this.props.cancelCreateAccount}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleCreateAccount}>\r\n            <label>\r\n                Email: \r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleNewAccountChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPassword\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.accountPassword}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPasswordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.accountPasswordRepeat}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" />\r\n            </label> \r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityQuestion}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityAnswer}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <button role=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default CreateAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    render() {\r\n        return;\r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport CreateAccountDialog from './CreateAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {accountCreateAttempted: false,\r\n                  accountCreateMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showCreateAccountDialog: false,\r\n                  showResetPasswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\"\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLogin -- Callback function that sets up initial app state upon login.\r\nhandleLogin = () => {\r\n    //Stop spinner\r\n    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                   loginBtnLabel: \"Log In\"});\r\n    //Set current user\r\n    this.props.setUserId(this.emailInputRef.current.value);\r\n    //Trigger switch to FEED mode (default app landing page)\r\n    this.props.changeMode(AppMode.FEED);\r\n}\r\n\r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText}, () => setTimeout(this.hideErrorMsg,3000));\r\n    }\r\n}\r\n\r\n//hideErrorMsg -- Hide the error message and clear out username/password fields\r\nhideErrorMsg = () => {\r\n    this.emailInputRef.current.value = \"\";\r\n    this.passwordInputRef.current.value = \"\";\r\n    this.setState({loginMsg: \"\"});\r\n}\r\n\r\n//handleLoginChange -- Check the validity of the username (email address)\r\n//password entered into the login page, setting the customValidity message \r\n//appropriately. \r\nhandleLoginChange = () => {\r\n    let thisUser = this.emailInputRef.current.value;\r\n    let data = JSON.parse(localStorage.getItem(thisUser));\r\n    //Check username and password:\r\n    if (data == null) { \r\n        this.emailInputRef.current.setCustomValidity(\"No account with this email address exists. Choose 'Create an account'.\");\r\n        return; //Exit the function; no need to check pw validity\r\n    } else {\r\n        this.emailInputRef.current.setCustomValidity(\"\");\r\n    }\r\n    if (data.password != this.passwordInputRef.current.value) {\r\n        this.passwordInputRef.current.setCustomValidity(\"The password you entered is incorrect. Please try again or choose 'Reset your password'.\");\r\n    } else {\r\n        this.passwordInputRef.current.setCustomValidity(\"\");\r\n    }\r\n  }\r\n\r\n  //newAccountCreated -- Called by child CreateAccountDialog component when new user account\r\n  //successfully created. Hide the dialog and display a message inviting user to log in\r\n  //with new credentials.\r\n  accountCreateStatus = (msg) => {\r\n      this.setState({accountCreateAttempted: true,\r\n                     accountCreateMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n\r\n  render() {\r\n    return(\r\n        <div id=\"login-mode-div\" className=\"padded-page\">\r\n        <center>\r\n            <h1 />\r\n            {this.state.accountCreateAttempted ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit} onChange={this.handleLoginChange}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateAccountDialog \r\n                accountCreateStatus={this.accountCreateStatus}\r\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  //TO DO: Implement the confirmation dialog box. For now, we\r\n  //present alert box placeholder\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    alert(\"Confirm Delete Goes here!\");\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (const r in this.props.rounds) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + this.props.rounds[r].seconds + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              this.props.rounds[r].seconds + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //Create date object for today, taking time zone into consideration\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n        //store date as ISO string\r\n        if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n            //If logging a new round, the starting state is a default round with\r\n            //today's date.\r\n            this.state = {date:  today.toISOString().substr(0,10), \r\n                        course: \"\",\r\n                        type: \"practice\",\r\n                        holes: \"18\",\r\n                        strokes: 80,\r\n                        minutes: 50,\r\n                        seconds: \"00\",\r\n                        notes: \"\",\r\n                        faIcon: \"fa fa-save\",\r\n                        btnLabel: \"Save Round Data\"}\r\n        } else {\r\n            //if editing an existing round, the starting state is the round's\r\n            //current data\r\n            this.state = this.props.startData;\r\n            this.state.faIcon = \"fa fa-edit\";\r\n            this.state.btnLabel = \"Update Round Data\";\r\n        }\r\n    }\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.state.SGS} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n            super(props);\r\n            let data = JSON.parse(localStorage.getItem(this.props.userId)); \r\n            if (data == null) { //no data yet for this user -- create empty record\r\n                data = {rounds: {},\r\n                        roundCount: 0};  \r\n                localStorage.setItem(this.props.userId,JSON.stringify(data));\r\n            }\r\n            this.state = {rounds: data.rounds,\r\n                          roundCount: data.roundCount,\r\n                          deleteId: \"\",\r\n                          editId: \"\"};           \r\n        }\r\n\r\n    //addRound -- Given an object newData containing a new round, add the round\r\n    //to the current user's list of rounds, incremeting roundCount to ensure\r\n    //the round id is unique. Then commit to local storage and toggle\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = (newData) => {\r\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\r\n        data.rounds[++data.roundCount] = newData;\r\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\r\n        this.setState({rounds: data.rounds, roundCount: data.roundCount});\r\n        this.props.changeMode(AppMode.ROUNDS);\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round uniquely identified by\r\n    //this.state.editId, commit to local storage, reset editId to empty and\r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = (newData) => {\r\n        let data = JSON.parse(localStorage.getItem(this.props.userId)); \r\n        data.rounds[this.state.editId] = newData;\r\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\r\n        this.setState({rounds: data.rounds, editId: \"\"});\r\n        this.props.changeMode(AppMode.ROUNDS);\r\n    }\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, commit to local storage, and reset deleteId to empty.\r\n    deleteRound = () => {\r\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\r\n        delete data.rounds[this.state.deleteId];\r\n        localStorage.setItem(this.props.userId,JSON.stringify(data));\r\n        this.setState({rounds: data.rounds, deleteId: \"\"});\r\n    }  \r\n\r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    <RoundsTable \r\n                    rounds={this.state.rounds}\r\n                    setEditId={this.setEditId}\r\n                    setDeleteId={this.setDeleteId}\r\n                    deleteRound={this.deleteRound}\r\n                    changeMode={this.props.changeMode}\r\n                    menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={this.state.rounds[this.state.editId]} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport FloatingButton from './FloatingButton.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userId: \"\"};\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    window.addEventListener(\"click\",this.handleClick);\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            const userId = obj.user.id;\r\n            let data = JSON.parse(localStorage.getItem(userId));\r\n            if (data == null) {\r\n              //create new user with this id in database (localStorage)\r\n              data = {\r\n                password: '',\r\n                profilePicURL: obj.user.profileImageUrl,\r\n                displayName: obj.user.displayName,\r\n                securityQuestion: '',\r\n                securityAnswer: '',\r\n                rounds: {}, \r\n                roundCount: 0\r\n              };\r\n              //Commit to localStorage:\r\n              localStorage.setItem(userId,JSON.stringify(data));\r\n            } \r\n            //Update current user\r\n            this.setState({\r\n              userId: userId,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            userId={this.state.userId}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userId={this.state.userId}\r\n            setUserId={this.setUserId}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}